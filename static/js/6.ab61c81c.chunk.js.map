{"version":3,"sources":["utils/validators.ts","common/Formcontrols/FormControl.tsx","common/Formcontrols/FormControl.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Items/Messages.tsx","components/Dialogs/Items/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["required","value","maxLengthCreator","maxLength","length","FormControl","meta","touched","error","children","hasError","className","classes","formControl","TextArea","props","input","restProps","createField","placeHolder","name","validators","component","text","placeholder","validate","module","exports","maxLength50","reduxForm","form","onSubmit","handleSubmit","Message","dialog","message","DialogItem","path","id","active","to","Dialogs","state","dialogsPage","dialogsElement","dialogs","map","d","key","messagesElement","messages","m","dialogsItems","values","sendMessageCreator","newMessageBody","connect"],"mappings":"gHAIA,oEAAO,IAAMA,EAA+B,SAACC,GACzC,IAAIA,EACJ,MAAO,qBAKEC,EAAmB,SAACC,GAAD,OAA0C,SAACF,GACvE,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,+LCL5BE,G,OAA2C,SAAC,GAA6C,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SACrEC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWC,IAAQC,YAAc,KAAOH,EAAWE,IAAQJ,MAAQ,KACpE,6BACKC,GAEJC,GAAY,8BAAOF,MAKnBM,EAAwC,SAACC,GAAU,IAEpDC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KAF6C,YAEtBS,EAFsB,mBAG5D,OAAO,kBAACV,EAAgBU,EAAO,8CAAcC,EAAWC,MAE/CD,EAAqC,SAACD,GAAU,IAEjDC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KAF0C,YAEnBS,EAFmB,mBAGzD,OAAO,kBAACV,EAAgBU,EAAO,2CAAWC,EAAWC,MAUlD,SAASC,EAAoCC,EAAiCC,EAAeC,EAAuCC,GAAkE,IAA3BP,EAA0B,uDAAlB,GAAIQ,EAAc,uDAAP,GAClM,OAAO,6BACF,kBAAC,IAAD,eACAC,YAAeL,EACfC,KAAQA,EACRK,SAAYJ,EACZC,UAAaA,GACTP,IANF,IAMaQ,K,oBC3CvBG,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,iBAAmB,wC,oBCAvHD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,uGCI9KC,EAAc1B,YAAiB,IAcpB2B,cAAoC,CAACC,KAAM,2BAA3CD,EAVsF,SAACd,GAClG,OAAO,0BAAMgB,SAAYhB,EAAMiB,cAC3B,6BACKd,YAA0C,qBAAsB,iBACjE,CAAClB,IAAU4B,GAAcd,MAE7B,6BAAK,qD,kBCHEmB,EANsB,SAAClB,GAClC,OAAO,yBAAKJ,UAAYC,IAAQsB,QAC3BnB,EAAMoB,U,QCMAC,EAPyB,SAACrB,GACrC,IAAIsB,EAAO,YAActB,EAAMuB,GAC/B,OAAO,yBAAK3B,UAAaC,IAAQsB,OAAS,IAAMtB,IAAQ2B,QACpD,kBAAC,IAAD,CAASC,GAAMH,GAAOtB,EAAMK,QCwBrBqB,EApBsB,SAAC1B,GAClC,IAAI2B,EAAQ3B,EAAM4B,YACdC,EAAiBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAY3B,KAAM2B,EAAE3B,KAAM4B,IAAKD,EAAET,GAAIA,GAAIS,EAAET,QACnFW,EAAkBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAAShB,QAASgB,EAAEhB,QAASa,IAAKG,EAAEb,QAMlF,OAAO,6BACH,yBAAK3B,UAAWC,IAAQwC,cACnBR,GAEL,yBAAKjC,UAAWC,IAAQsC,UACpB,6BAAMD,IAEV,kBAAC,EAAD,CAAgBlB,SAZA,SAACsB,GACjBtC,EAAMuC,mBAAmBD,EAAOE,qBCHzBC,uBAZS,SAACd,GACrB,MAAO,CACHC,YAAaD,EAAMC,eAUmD,CAAEW,wBAAjEE,CAAuFf","file":"static/js/6.ab61c81c.chunk.js","sourcesContent":["\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return 'Field is required';\r\n}\r\n\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number):FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined\r\n}","import { FieldValidatorType } from '../../utils/validators';\r\nimport React from 'react'\r\nimport classes from './FormControl.module.css'\r\nimport { Field, WrappedFieldProps } from 'redux-form'\r\nimport {  } from '../../utils/validators'\r\n\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = ({  meta: { touched, error }, children }) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const { input, meta, child, ...restProps } = props;\r\n    const { input, meta, ...restProps } = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\nexport const input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const { input, meta, child, ...restProps } = props;\r\n    const { input, meta, ...restProps } = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\ntype NameType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\nexport function createField<KeyType extends string>(placeHolder: string | undefined, name: KeyType, validators: Array<FieldValidatorType>, component:React.FC<WrappedFieldProps>, props = {}, text = \"\")    {\r\n   return <div>\r\n        <Field \r\n        placeholder = {placeHolder} \r\n        name = {name}\r\n        validate = {validators}\r\n        component = {component}\r\n        {...props} /> {text}\r\n    </div>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__UcaXW\",\"error\":\"FormControl_error__2MK4J\",\"formSummaryError\":\"FormControl_formSummaryError__mpvwI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__T_cxL\",\"dialogsItems\":\"Dialogs_dialogsItems__3x7hS\",\"active\":\"Dialogs_active__ZXSMv\",\"messages\":\"Dialogs_messages__TAIri\",\"message\":\"Dialogs_message__3_0iO\"};","import React from 'react'\r\nimport { createField, TextArea } from '../../../common/Formcontrols/FormControl'\r\nimport { maxLengthCreator, required } from '../../../utils/validators'\r\nimport { reduxForm, InjectedFormProps } from 'redux-form'\r\nimport {NewMessageFormValuesType} from '../Dialogs'\r\nlet maxLength50 = maxLengthCreator(50)\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType & PropsType>> = (props) => {\r\n    return <form onSubmit = {props.handleSubmit}>\r\n        <div>\r\n            {createField<NewMessageFormValuesKeysType>('Enter your message', 'newMessageBody',\r\n            [required, maxLength50], TextArea)}\r\n        </div>\r\n        <div><button>Send message</button></div>\r\n    </form>\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialog-add-message-form'})(AddMessageForm)","import React from 'react'\r\nimport classes from '../Dialogs.module.css'\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return <div className ={classes.dialog}>\r\n        {props.message}\r\n    </div>\r\n}\r\n\r\nexport default Message","import React from 'react'\r\nimport classes from '../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {dialogsType} from '../../../redux/dialogs-reducer'\r\n\r\ntype PropsType = dialogsType\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return <div className = {classes.dialog + ' ' + classes.active}>\r\n        <NavLink to = {path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem","import React from 'react'\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm'\r\nimport Message from './Items/Messages'\r\nimport DialogItem from './Items/DialogItem'\r\nimport classes from './Dialogs.module.css'\r\nimport { initialStateType } from '../../redux/dialogs-reducer'\r\n\r\ntype PropsType = {\r\n    dialogsPage: initialStateType\r\n    sendMessageCreator: (newMessageBody: string) => void\r\n}\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let state = props.dialogsPage\r\n    let dialogsElement = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />)\r\n    let messagesElement = state.messages.map(m => <Message message={m.message} key={m.id} />)\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessageCreator(values.newMessageBody)\r\n    }\r\n\r\n\r\n    return <div>\r\n        <div className={classes.dialogsItems}>\r\n            {dialogsElement}\r\n        </div>\r\n        <div className={classes.messages}>\r\n            <div>{messagesElement}</div>\r\n        </div>\r\n        <AddMessageForm onSubmit={addNewMessage} />\r\n    </div>\r\n}\r\n\r\nexport default Dialogs","import { sendMessageCreator, initialStateType } from '../../redux/dialogs-reducer'\r\nimport { connect } from 'react-redux'\r\nimport Dialogs from './Dialogs'\r\nimport { AppReducersType } from '../../redux/redux-store'\r\nconst mapStateToProps = (state: AppReducersType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\ntype mstp = {\r\n    dialogsPage: initialStateType\r\n}\r\ntype mdtp = {\r\n    sendMessageCreator: (newMessageBody: string) => void\r\n}\r\nexport default connect<mstp, mdtp, unknown, AppReducersType>(mapStateToProps, { sendMessageCreator })(Dialogs)"],"sourceRoot":""}