{"version":3,"sources":["utils/validators.ts","common/Formcontrols/FormControl.tsx","common/Formcontrols/FormControl.module.css","components/Login/Login.tsx"],"names":["required","value","maxLengthCreator","maxLength","length","FormControl","meta","touched","error","children","hasError","className","classes","formControl","TextArea","props","input","restProps","createField","placeHolder","name","validators","component","text","placeholder","validate","module","exports","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","undefined","src","formSummaryError","connect","state","isAuth","auth","login","captchaDisplayed","to","formData","email","password","rememberMe","captcha"],"mappings":"gHAIA,oEAAO,IAAMA,EAA+B,SAACC,GACzC,IAAIA,EACJ,MAAO,qBAKEC,EAAmB,SAACC,GAAD,OAA0C,SAACF,GACvE,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,+LCL5BE,G,OAA2C,SAAC,GAA6C,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SACrEC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWC,IAAQC,YAAc,KAAOH,EAAWE,IAAQJ,MAAQ,KACpE,6BACKC,GAEJC,GAAY,8BAAOF,MAKnBM,EAAwC,SAACC,GAAU,IAEpDC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KAF6C,YAEtBS,EAFsB,mBAG5D,OAAO,kBAACV,EAAgBU,EAAO,8CAAcC,EAAWC,MAE/CD,EAAqC,SAACD,GAAU,IAEjDC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KAF0C,YAEnBS,EAFmB,mBAGzD,OAAO,kBAACV,EAAgBU,EAAO,2CAAWC,EAAWC,MAUlD,SAASC,EAAoCC,EAAiCC,EAAeC,EAAuCC,GAAkE,IAA3BP,EAA0B,uDAAlB,GAAIQ,EAAc,uDAAP,GAClM,OAAO,6BACF,kBAAC,IAAD,eACAC,YAAeL,EACfC,KAAQA,EACRK,SAAYJ,EACZC,UAAaA,GACTP,IANF,IAMaQ,K,oBC3CvBG,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,iBAAmB,wC,iCCDvH,+FAmCMC,EAAiBC,YAAuC,CAAEC,KAAM,SAA/CD,EAdyE,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,WAAYxB,EAAY,EAAZA,MACzH,OACI,0BAAMyB,SAAUF,GACXb,YAAyB,QAAS,QAAS,CAAClB,KAAWgB,KACvDE,YAAyB,WAAY,WAAY,CAAClB,KAAWgB,IAAO,CAAEkB,KAAM,aAC5EhB,iBAAyBiB,EAAW,aAAc,GAAInB,IAAO,CAAEkB,KAAM,aACrEF,GAAc,yBAAKI,IAAKJ,IACxBA,GAAcd,YAAY,gBAAiB,UAAW,CAAClB,KAAWgB,KAClER,GAAS,yBAAKG,UAAWC,IAAQyB,kBAAmB7B,GACrD,mCAAQ,yCAAR,SAuCG8B,uBAfS,SAACC,GAAD,MAAkD,CACtEC,OAAQD,EAAME,KAAKD,OACnBR,WAAYO,EAAME,KAAKT,cAa+E,CAAEU,UAAOC,sBAApGL,EA/BwD,SAAC,GAAiC,IAAhCN,EAA+B,EAA/BA,WAAYQ,EAAmB,EAAnBA,OAAQE,EAAW,EAAXA,MAKzF,OAAIF,EACO,kBAAC,IAAD,CAAUI,GAAI,cAGrB,6BACI,qCACA,kBAAChB,EAAD,CAAgBI,WAAYA,EAAYC,SAVjC,SAACY,GACZH,EAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI","file":"static/js/8.0078341f.chunk.js","sourcesContent":["\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return 'Field is required';\r\n}\r\n\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number):FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined\r\n}","import { FieldValidatorType } from '../../utils/validators';\r\nimport React from 'react'\r\nimport classes from './FormControl.module.css'\r\nimport { Field, WrappedFieldProps } from 'redux-form'\r\nimport {  } from '../../utils/validators'\r\n\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = ({  meta: { touched, error }, children }) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const { input, meta, child, ...restProps } = props;\r\n    const { input, meta, ...restProps } = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\nexport const input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const { input, meta, child, ...restProps } = props;\r\n    const { input, meta, ...restProps } = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\ntype NameType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\nexport function createField<KeyType extends string>(placeHolder: string | undefined, name: KeyType, validators: Array<FieldValidatorType>, component:React.FC<WrappedFieldProps>, props = {}, text = \"\")    {\r\n   return <div>\r\n        <Field \r\n        placeholder = {placeHolder} \r\n        name = {name}\r\n        validate = {validators}\r\n        component = {component}\r\n        {...props} /> {text}\r\n    </div>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__3TCNf\",\"error\":\"FormControl_error__Csc7B\",\"formSummaryError\":\"FormControl_formSummaryError__3N4Tn\"};","import React from 'react'\r\nimport { createField, input } from '../../common/Formcontrols/FormControl'\r\nimport { required } from '../../utils/validators'\r\nimport classes from '../../common/Formcontrols/FormControl.module.css'\r\nimport { reduxForm, InjectedFormProps } from 'redux-form'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux'\r\nimport { login, captchaDisplayed } from '../../redux/auth-reducer'\r\nimport { AppReducersType } from '../../redux/redux-store'\r\n\r\n\r\n\r\ntype LoginProsOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype FormData = {\r\n    email: string , password: string, rememberMe: boolean, captcha: string | null\r\n}\r\n\r\ntype FormDataKey  = Extract<keyof FormData, string>\r\nconst LoginForm: React.FC<InjectedFormProps<FormData, LoginProsOwnProps> & LoginProsOwnProps> = ({ handleSubmit, captchaUrl, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<FormDataKey>('Email', 'email', [required], input)}\r\n            {createField<FormDataKey>('Password', 'password', [required], input, { type: 'password' })}\r\n            {createField<FormDataKey>(undefined, 'rememberMe', [], input, { type: 'checkbox' })}\r\n            {captchaUrl && <img src={captchaUrl} />}\r\n            {captchaUrl && createField('enter symbols', 'captcha', [required], input)}\r\n            {error && <div className={classes.formSummaryError}>{error}</div>}\r\n            <div>   <button>Login</button> </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormData, LoginProsOwnProps>({ form: 'login' })(LoginForm)\r\n\r\n\r\nconst Login: React.FC<MapStateToPropsType & MapDispatchToPropsType > = ({captchaUrl, isAuth, login}) => {\r\n    let onSubmit = (formData: FormData) => {\r\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'./profile'} />\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm captchaUrl={captchaUrl} onSubmit={onSubmit} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppReducersType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string , password: string, rememberMe: boolean, captcha: string | null) => void\r\n    captchaDisplayed: () => void\r\n}\r\ntype OwnType = {}\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppReducersType>(mapStateToProps, { login, captchaDisplayed })(Login)\r\n"],"sourceRoot":""}