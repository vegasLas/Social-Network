{"version":3,"sources":["components/NavBar/Navbar.module.scss","utils/object-helers.ts","serviceWorker.js","redux/sidebar-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/NavBar/Navbar.tsx","pictures/logo.png","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","hoc/Suspense.tsx","App.tsx","index.tsx","api/AuthAPI.ts","redux/auth-reducer.ts","components/Header/Header.module.scss","api/api.ts","pictures/loader.gif","common/Preloader.tsx","api/ProfileAPI.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","api/UsersAPI.ts","redux/usersReducer.ts","common/Preloader.module.css"],"names":["module","exports","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","Boolean","window","location","hostname","match","initialState","sidebarReducer","state","initialized","Actions","type","appReducer","action","reducers","combineReducers","auth","authReducer","dialogsPage","dialogsReducer","profilePage","profileReducer","sidebarPage","usersPage","usersReducer","form","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","Navbar","className","classes","nav","item","to","activeClassName","activeLink","Header","props","header","headerLink","logo","src","loginBlock","isAuth","login","onClick","logout","HeaderContainer","this","Component","connect","createSuspense","WrappedComponent","fallback","Login","React","lazy","ProfileContainer","UsersContainer","DialogsContainer","ProfileConteincerWithSuspens","LoginWithSuspens","UsersContainerWithSuspens","DialogsContainerWithSuspens","App","initializeApp","path","exact","render","Preloader","AppConteiner","withRouter","dispatch","a","promise","getAuthUserData","Promise","all","then","MainApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","authAPI","instance","get","res","data","email","password","rememberMe","captcha","post","delete","userid","captchaUrl","actions","payload","resultCode","id","LogResultCodeenum","Success","messages","length","stopSubmit","_error","captchaDisplayed","ResultCodeEnum","url","axios","create","withCredentials","baseURL","headers","style","backgroundColor","loader","preloader","profileAPI","userId","profile","put","status","photoFile","formData","FormData","append","posts","likesCount","addPostActionCreator","newPostText","setUserProfile","setStatus","deletePost","postId","setPhotoSuccess","photos","getUserProfile","getStatus","updateStatus","setPhoto","photo","saveProfile","getState","reject","newPost","filter","dialogs","name","isSituation","sendMessageCreator","newMessageBody","body","usersAPI","getUsers","currentPage","pageSize","term","followed","getFriendsOfAllUsers","friend","follow","unfollow","require","users","totalUsersCount","isFetching","followingProgress","requestUsers","page","UsersData","totalCount","_followUngollowFlow","apiMethod","actionCreator","bind"],"mappings":"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","file":"static/js/main.9319044f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3kPKQ\",\"item\":\"Navbar_item__2krZX\"};","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    debugger\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    }\r\n    )}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","let initialState = {};\r\n\r\nconst sidebarReducer = (state = initialState, action: any) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import { InferActionsTypies, BaseThunkType } from './redux-store';\r\nimport { getAuthUserData } from \"./auth-reducer\";\r\n\r\ntype initialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\nexport type ThunkType = BaseThunkType<ActionsType>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport type ActionsType = InferActionsTypies<typeof Actions>\r\nexport const Actions = {\r\n    initializedSuccess: () => ({ type: \"INITIALIZED_SUCCESS\" } as const)\r\n}\r\nexport const initializeApp = (): ThunkType =>  async (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(Actions.initializedSuccess())\r\n        })\r\n}\r\n\r\nexport default appReducer;","import authReducer from \"./auth-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport { reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\nimport { applyMiddleware, compose, createStore, combineReducers, Action } from \"redux\";\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk'\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    auth: authReducer,\r\n    dialogsPage: dialogsReducer,\r\n    profilePage: profileReducer,\r\n    sidebarPage: sidebarReducer,    \r\n    usersPage: usersReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n\r\n})\r\n\r\ntype PropertiesType<T> = T extends{[key:string]: infer U} ? U : never\r\n\r\nexport type InferActionsTypies<T extends{[key: string]: (...args: any[]) => any}> = ReturnType<PropertiesType<T>>\r\n\r\n\r\ntype ReducersType = typeof reducers\r\nexport type AppReducersType = ReturnType<ReducersType>\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppReducersType, unknown, A>\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n//@ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from 'react'\r\nimport classes from './Navbar.module.scss'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <NavLink className={classes.item} to='/profile' activeClassName={classes.activeLink}>Profile</NavLink>\r\n            <NavLink className={classes.item} to='/dialogs' activeClassName={classes.activeLink}>Dialogs</NavLink>\r\n            <NavLink className={classes.item} to='/users' activeClassName={classes.activeLink}>Users</NavLink>\r\n            <NavLink className={classes.item} to='/news' activeClassName={classes.activeLink}>News</NavLink>\r\n            <NavLink className={classes.item} to='/music' activeClassName={classes.activeLink}>Music</NavLink>\r\n            <NavLink className={classes.item} to='/setings' activeClassName={classes.activeLink}>Setings</NavLink>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","export default __webpack_public_path__ + \"static/media/logo.175a5beb.png\";","import React from 'react'\r\nimport logo from '../../pictures/logo.png'\r\nimport classes from './Header.module.scss'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { PropsType } from './HeaderContainer'\r\nconst Header: React.FC<PropsType> = (props) => {\r\n\r\n    return <header className={classes.header}>\r\n        <NavLink className={classes.headerLink} to={'/'}>\r\n            <img className={classes.logo} src={logo} />\r\n        </NavLink>\r\n        <div className={classes.loginBlock}>\r\n            {props.isAuth\r\n                ? <div>{props.login} -<button onClick={props.logout}>Log out</button></div>\r\n                : <NavLink to={'/login'}>Login</NavLink>\r\n            }\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {logout} from '../../redux/auth-reducer';\r\nimport Header from './Header';\r\nimport { AppReducersType } from '../../redux/redux-store';\r\n\r\nexport type PropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nclass HeaderContainer extends Component<PropsType>{\r\n    render () {\r\n        return <Header \r\n        isAuth = {this.props.isAuth}\r\n        login = {this.props.login}\r\n        logout = {this.props.logout}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppReducersType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\ntype mstp = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype mdtp = {\r\n    logout: () => void\r\n}\r\nexport default connect<mstp, mdtp, unknown, AppReducersType>(mapStateToProps, {logout}) (HeaderContainer)","import React, { Suspense, ComponentType } from 'react'\r\n\r\nfunction createSuspense<WP>(WrappedComponent: ComponentType<WP>) {\r\n    return  (props: WP) => {\r\n    return <Suspense fallback={<div>Loading...</div>}>\r\n        <WrappedComponent {...props} />\r\n    </Suspense>\r\n    }\r\n}\r\n\r\nexport default createSuspense","import React, { Component, Suspense } from 'react';\r\nimport './App.scss';\r\nimport { Route, withRouter, BrowserRouter, Switch, Redirect } from \"react-router-dom\";\r\nimport { connect, Provider } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport store, { AppReducersType } from \"./redux/redux-store\";\r\nimport Preloader from './common/Preloader';\r\nimport Navbar from './components/NavBar/Navbar';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport createSuspense from './hoc/Suspense';\r\nimport { initializeApp, ThunkType } from './redux/app-reducer'\r\nconst Login = React.lazy(() => import('./components/Login/Login'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\n\r\ntype PropsType = mstp & mdtp\r\n\r\nconst ProfileConteincerWithSuspens = createSuspense(ProfileContainer)\r\nconst LoginWithSuspens = createSuspense(Login)\r\nconst UsersContainerWithSuspens = createSuspense(UsersContainer)\r\nconst DialogsContainerWithSuspens = createSuspense(DialogsContainer)\r\n\r\n\r\nclass App extends Component<PropsType> {\r\n  componentDidMount() {\r\n    this.props.initializeApp()\r\n  }\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />\r\n    }\r\n    return (\r\n      <div className='app-wrapper'>\r\n        <HeaderContainer />\r\n        <div className=\"app-wrapper-content\">\r\n          <Navbar />\r\n          <div className=\"main-screen\">\r\n            <Switch>\r\n              <Route path='/' exact> <Redirect to=\"/profile\" /> </Route>\r\n              <Route path='/profile/:userId?'\r\n                render={() => <ProfileConteincerWithSuspens />} />\r\n              <Route path='/login'\r\n                render={() => <LoginWithSuspens />} />\r\n              <Route path='/users'\r\n                render={() => <UsersContainerWithSuspens />} />\r\n              <Route path='/dialogs'\r\n                render={() => <DialogsContainerWithSuspens />} />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n        <footer className=\"footer\">\r\n          Copyright\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\ntype mstp = {\r\n  initialized: boolean\r\n}\r\ntype mdtp = {\r\n  initializeApp: () => void\r\n}\r\nconst mapStateToProps = (state: AppReducersType) => ({\r\n  initialized: state.app.initialized\r\n})\r\nlet AppConteiner = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect<mstp, mdtp, unknown, AppReducersType>(mapStateToProps, { initializeApp })\r\n)(App)\r\n\r\nconst MainApp = (props: any) => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <AppConteiner />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n\r\n}\r\n\r\nexport default MainApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport MainApp from './App';\r\n\r\nReactDOM.render(<MainApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n    ","import { instance, ResultCodeEnum, ResponseType, LogResultCodeenum } from './api'\r\n\r\n\r\ntype GetAuthDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\ntype LoginResponseData = {\r\n    userId: number\r\n}\r\ntype GetCaptcha = {\r\n    url: string\r\n}\r\n\r\n\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<GetAuthDataType, ResultCodeEnum>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean, captcha: null | string) {\r\n        return instance.post<ResponseType<LoginResponseData, LogResultCodeenum>>(`auth/login`, { email, password, rememberMe, captcha }).then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`).then(res => res.data);\r\n    },\r\n    getCaptcha() {\r\n        return instance.get<GetCaptcha>(`security/get-captcha-url`).then(res => res.data);\r\n    }\r\n}","import { LogResultCodeenum, ResultCodeEnum } from './../api/api';\r\nimport { AppReducersType, InferActionsTypies, BaseThunkType } from './redux-store';\r\nimport { Dispatch } from 'react';\r\nimport { authAPI } from \"../api/AuthAPI\";\r\nimport { stopSubmit, FormAction } from \"redux-form\";\r\n\r\nlet initialState = {\r\n    userid: 1 as number,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false as boolean,\r\n    captchaUrl: null as string | null\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n        case \"SET_CAPTCHA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst actions = {\r\n    setAuthUserData: (userid: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: \"SET_USER_DATA\",\r\n        payload: { userid, email, login, isAuth }\r\n    }),\r\n    setCaptcha: (captchaUrl: string | null) => ({\r\n        type: \"SET_CAPTCHA\",\r\n        payload: { captchaUrl }\r\n    })\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\ntype ActionsType = InferActionsTypies<typeof actions> | FormAction\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.me();\r\n    if (data.resultCode === 0) {\r\n        let { id, login, email } = data.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string | null): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === LogResultCodeenum.Success) {\r\n        dispatch(getAuthUserData())\r\n    }\r\n    else {\r\n        let message = data.messages.length > 0 ? data.messages[0] : 'Some error';\r\n        dispatch(stopSubmit('login', { _error: message }))\r\n        if (data.resultCode === LogResultCodeenum.captcha) {\r\n            dispatch(captchaDisplayed())\r\n        }\r\n    }\r\n}\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.logout();\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\nexport const captchaDisplayed = (): ThunkType => async (dispatch) => {\r\n    const data = await authAPI.getCaptcha();\r\n    const captcha = data.url\r\n    dispatch(actions.setCaptcha(captcha))\r\n}\r\n\r\nexport default authReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__HlDq9\",\"logo\":\"Header_logo__2wAM6\",\"loginBlock\":\"Header_loginBlock__j_F4O\",\"headerLink\":\"Header_headerLink__10tn6\"};","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: { 'API-KEY': '19935fd5-6e17-47c2-8544-ba33f3051235' }\r\n})\r\nexport type ResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data: D\r\n    resultCode: RC\r\n    messages: Array<string>\r\n}\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum LogResultCodeenum {\r\n    captcha = 10,\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n","export default __webpack_public_path__ + \"static/media/loader.7ac311d0.gif\";","import React from 'react';\r\nimport preloader from '../pictures/loader.gif';\r\nimport classes from './Preloader.module.css';\r\n\r\nlet Preloader = () => { \r\n    return <div style = { {backgroundColor: 'white'}} >\r\n        <img className = {classes.loader} src = {preloader} />\r\n    </div>\r\n}\r\n\r\nexport default Preloader","import {instance, ResponseType} from './api'\r\nimport { photoType, ProfileType} from '../types/types'\r\n\r\n\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<ResponseType>(`profile`, profile).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId ).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ResponseType>(`profile/status`, { status: status }).then(res => res.data)\r\n    },\r\n    setPhoto(photoFile: Blob ) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<ResponseType<{photos: photoType}>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    }\r\n}","import { InferActionsTypies, BaseThunkType } from './redux-store';\r\nimport { ProfileType, SaveProfileType, photoType } from './../types/types';\r\nimport { ResultCodeEnum } from \"../api/api\"\r\nimport { stopSubmit } from \"redux-form\"\r\nimport { Dispatch } from 'react';\r\nimport { profileAPI } from '../api/ProfileAPI';\r\n\r\n\r\ntype postType = {\r\n    id: number, message: string, likesCount: number,\r\n}\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: 'first', likesCount: 12 },\r\n        { id: 2, message: 'TRATATTA', likesCount: 11 },\r\n        { id: 3, message: 'Pleti your live', likesCount: 11 },\r\n        { id: 4, message: 'ccC', likesCount: 11 }\r\n    ] as Array<postType>,\r\n    profile: null as ProfileType | null,\r\n    status: '' as string,\r\n}\r\nexport type initialStateType = typeof initialState\r\nconst profileReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_POST\": {\r\n            let newPost: postType = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 1\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        }\r\n        case \"SET_STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"SET_USER_PROFILE\": {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case \"DELETE_POST\": {\r\n            return {\r\n                ...state, posts: state.posts.filter(post => post.id != action.postId)\r\n            }\r\n        }\r\n        case \"SET_PHOTO\": {\r\n            return { ...state, profile: { ...state.profile, photos: action.photos } as ProfileType }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type ActionsType = InferActionsTypies<typeof actions>\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({ type: \"ADD_POST\", newPostText } as const),\r\n    setUserProfile: (profile: ProfileType) => ({ type: \"SET_USER_PROFILE\", profile } as const),\r\n    setStatus: (status: string) => ({ type: \"SET_STATUS\", status } as const),\r\n    deletePost: (postId: number) => ({ type: \"DELETE_POST\", postId } as const),\r\n    setPhotoSuccess: (photos: photoType) => ({ type: \"SET_PHOTO\", photos } as const)\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsType | ReturnType<typeof stopSubmit>>\r\n\r\nexport const getInformationProfile = (userID: number, authorizedUserId: number, history: any): ThunkType => async (dispatch) => {\r\n    let userId = userID\r\n    if (!userId) {\r\n        userId = authorizedUserId;\r\n        if (!userID) {\r\n            history.push(\"/login\");\r\n        }\r\n    }\r\n    dispatch(getUserProfile(userId));\r\n    dispatch(getStatus(userId));\r\n}\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data))\r\n}\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data))\r\n}\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.setStatus(status))\r\n    }\r\n}\r\nexport const setPhoto = (photo: Blob): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.setPhoto(photo);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.setPhotoSuccess(data.data.photos))\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userid\r\n    let data = await profileAPI.saveProfile(profile);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(getUserProfile(userId))\r\n    }\r\n    else {\r\n        dispatch(stopSubmit('ProfileData', { _error: data.messages[0] }))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer","const SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nexport type dialogsType = {\r\n    id: number\r\n    name: String\r\n}\r\nexport type messageType = {\r\n    id: number\r\n    message: string\r\n    isSituation: boolean\r\n}\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        { id: 1, name: 'Pantiley' },\r\n        { id: 2, name: 'Skrepka' },\r\n        { id: 3, name: 'Felix' },\r\n        { id: 4, name: 'Toro' },\r\n        { id: 5, name: 'Viking' },\r\n        { id: 6, name: 'Axiles' }\r\n    ] as Array<dialogsType>,\r\n    messages: [\r\n        { id: 1, message: 'Hi', isSituation: true },\r\n        { id: 2, message: 'How is your nothing?0', isSituation: false },\r\n        { id: 3, message: 'AWESOME', isSituation: true },\r\n        { id: 4, message: 'WO WO', isSituation: false },\r\n        { id: 5, message: 'What did you think?', isSituation: true }\r\n    ] as Array<messageType>\r\n};\r\n\r\nexport type initialStateType = typeof initialState\r\ntype ActionsType = sendMessageCreatorType\r\nconst dialogsReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages:\r\n                    [...state.messages, { id: 6, message: body, isSituation: false }]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\ntype sendMessageCreatorType = { type: typeof SEND_MESSAGE, newMessageBody: string }\r\nexport const sendMessageCreator = (newMessageBody: string): sendMessageCreatorType => ({ type: SEND_MESSAGE, newMessageBody })\r\n\r\n\r\nexport default dialogsReducer;","import { userType } from \"../types/types\"\r\nimport {instance, ResponseType} from './api'\r\n\r\ntype UsersGetType = {\r\n    items: Array<userType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term = \"\", followed: boolean | null = null) {\r\n    return instance.get<UsersGetType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`+ (followed === null ? '' : `&friend=${followed}`)).then(res => res.data)\r\n    },  \r\n    getFriendsOfAllUsers(friend: true) {\r\n        return instance.get<UsersGetType>(`users?friend=${friend}`).then(res => res.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<ResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<ResponseType>(`follow/${userId}`).then(res => res.data)\r\n    }\r\n}","import { ResponseType } from './../api/api';\r\nimport { AppReducersType, InferActionsTypies } from './redux-store';\r\n\r\nimport { usersAPI } from \"../api/UsersAPI\"\r\nimport { userType } from \"../types/types\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { Dispatch } from 'react';\r\nimport { ResultCodeEnum } from '../api/api';\r\n\r\nconst { updateObjectInArray } = require(\"../utils/object-helers\")\r\n\r\n\r\nlet initialState: initialStateType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingProgress: [],\r\n    filter: {\r\n        friend: null,\r\n        term: ''\r\n    }\r\n}\r\nexport type initialStateType = {\r\n    users: Array<userType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingProgress: Array<number>,\r\n    filter: FilterType\r\n}\r\nexport type FilterType = {\r\n    friend: boolean | null\r\n    term: string\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return { ...state, users: updateObjectInArray(state.users, action.userId, 'id', { followed: true }) }\r\n        case \"UNFOLLOW\":\r\n            return { ...state, users: updateObjectInArray(state.users, action.userId, 'id', { followed: false }) }\r\n        case \"SET_USERS\":\r\n            return { ...state, users: action.users }\r\n        case \"SET_CURRENT_PAGE\":\r\n            return { ...state, currentPage: action.currentPage }\r\n        case \"SET_FILTER\":\r\n            return { ...state, filter: action.payload }\r\n        case \"SET_TOTAL_USERS_COUNT\":\r\n            return { ...state, totalUsersCount: action.totalUsersCount }\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return { ...state, isFetching: action.isFetching }\r\n        case \"TOGGLE_IS_FOLLO0WING_PROGRESS\":\r\n            return {\r\n                ...state, followingProgress: action.isFetching\r\n                    ? [...state.followingProgress, action.userId]\r\n                    : state.followingProgress.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypies<typeof actions>\r\n\r\nexport let actions = {\r\n    followSuccess: (userId: number) => ({ type: 'FOLLOW', userId } as const),\r\n    unfollowSuccess: (userId: number) => ({ type: 'UNFOLLOW', userId } as const),\r\n    setUsers: (users: Array<userType>) => ({ type: 'SET_USERS', users } as const),\r\n    setFilter: (filter: FilterType) => ({ type: 'SET_FILTER', payload: filter } as const),\r\n    setCurrentPage: (currentPage: number) => ({ type: 'SET_CURRENT_PAGE', currentPage } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({ type: 'SET_TOTAL_USERS_COUNT', totalUsersCount } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({ type: 'TOGGLE_IS_FETCHING', isFetching } as const),\r\n    toggleIsFillowingProgress: (isFetching: boolean, userId: number) => ({ type: 'TOGGLE_IS_FOLLO0WING_PROGRESS', isFetching, userId } as const)\r\n}\r\ntype ThunkType = ThunkAction<Promise<void>, AppReducersType, unknown, ActionsTypes>\r\n\r\ntype DispatchType = Dispatch<ActionsTypes>\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true))\r\n    dispatch(actions.setCurrentPage(page))\r\n    dispatch(actions.setFilter(filter))\r\n\r\n    let UsersData = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n\r\n    dispatch(actions.toggleIsFetching(false))\r\n    dispatch(actions.setUsers(UsersData.items))\r\n    dispatch(actions.setTotalUsersCount(UsersData.totalCount))\r\n}\r\nconst _followUngollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: (userId: number) => Promise<ResponseType>, actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleIsFillowingProgress(true, userId));\r\n    let data = await apiMethod(userId);\r\n\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleIsFillowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    await _followUngollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n}\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n    await _followUngollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n}\r\nexport default usersReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__1_UmU\"};"],"sourceRoot":""}